{
	order realip first
	order coraza_waf after realip
	log {
		format json
		output stdout
	}
}

:{$PORT} {

	# 1) Health check
	respond /health 200

	# 2) Real-IP (harmless without a real XFF header)
	realip {
		header X-Forwarded-For
		from   100.64.0.0/10
	}

	# 3) Security headers
	header {
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
		Content-Security-Policy  upgrade-insecure-requests
		Referrer-Policy          no-referrer
		Permissions-Policy       interest-cohort=()
		X-Content-Type-Options   nosniff
		X-Frame-Options          SAMEORIGIN
		-Server
	}

	# ─────────────────────────────────────────────────
	# 4) Handle WebSocket upgrade on /rest/push *before* WAF
	@ws {
		path   /rest/push*
		header Connection *Upgrade*
	}
	reverse_proxy @ws {env.BACKEND} {
		# must speak HTTP/1.1
		transport http { versions 1.1 }

		# forward Host + handshake headers
		header_up Host       {host}
		header_up Upgrade    {>Upgrade}
		header_up Connection {>Connection}

		# preserve scheme if your app uses it
		header_up X-Forwarded-Proto {scheme}
	}
	# ─────────────────────────────────────────────────

	# 5) Everything else goes through the WAF
	coraza_waf {
		load_owasp_crs
		directives `
			Include @coraza.conf-recommended
			Include @crs-setup.conf.example
			Include @owasp_crs/*.conf
			SecAction "id:900000,phase:1,setvar:'tx.paranoia_level=2'"
			SecRuleEngine On
			SecAuditEngine RelevantOnly
			SecAuditLogParts ABIFHZ
			SecAuditLog /dev/stdout
			SecAuditLogFormat json
		`
	}

	# 6) Proxy all other HTTP
	reverse_proxy {env.BACKEND} {
		header_up Host              {host}
		header_up X-Forwarded-Proto  https
		header_up X-Forwarded-Scheme https
	}
}
