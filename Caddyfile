{
	order realip first
	order coraza_waf after realip

	log {
		format json
		output stdout
	}
}

:{$PORT} {
	respond /health 200

	realip {
		header X-Forwarded-For
		from   100.64.0.0/10
	}

	# Security headers - exclude upgrade responses only
	@not_upgrade_response {
		not header_regexp Connection (?i)upgrade
	}
	
	header @not_upgrade_response {
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
		Content-Security-Policy  upgrade-insecure-requests
		Referrer-Policy          no-referrer
		Permissions-Policy       interest-cohort=()
		X-Content-Type-Options   nosniff
		X-Frame-Options          SAMEORIGIN
		-Server
	}

	# Coraza WAF with WebSocket-aware rules
	coraza_waf {
		load_owasp_crs
		directives `
			Include @coraza.conf-recommended
			Include @crs-setup.conf.example
			Include @owasp_crs/*.conf

			# Paranoia level 2
			SecAction "id:900000,phase:1,setvar:'tx.paranoia_level=2'"

			# Blocking mode + slim audit log
			SecRuleEngine On
			SecAuditEngine RelevantOnly
			SecAuditLogParts ABIFHZ
			SecAuditLog /dev/stdout
			SecAuditLogFormat json

			# WebSocket-specific allowances (be surgical, not broad)
			# Allow WebSocket upgrade in initial handshake only
			SecRule REQUEST_HEADERS:Connection "@contains upgrade" \
				"id:1001,phase:1,t:lowercase,chain"
			SecRule REQUEST_HEADERS:Upgrade "@rx ^websocket$" \
				"id:1002,phase:1,t:lowercase,pass,nolog,\
				setvar:'tx.websocket_handshake=1',\
				ctl:ruleRemoveById=920350,\
				ctl:ruleRemoveById=920230"

			# Still validate WebSocket handshake components
			SecRule REQUEST_HEADERS:Sec-WebSocket-Key "@rx ^[A-Za-z0-9+/]{22}==$" \
				"id:1003,phase:1,pass,nolog,\
				msg:'Valid WebSocket key format'"

			# Block suspicious WebSocket origins if needed
			SecRule REQUEST_HEADERS:Origin "@rx ^https?://(?!yourdomain\.com)" \
				"id:1004,phase:1,block,\
				msg:'WebSocket origin not allowed',\
				logdata:'Origin: %{MATCHED_VAR}'"

			# Rate limiting for WebSocket handshakes
			SecAction "id:1005,phase:1,\
				setvar:'ip.websocket_requests=%{ip.websocket_requests}',\
				expirevar:'ip.websocket_requests=60'"
			SecRule IP:WEBSOCKET_REQUESTS "@gt 10" \
				"id:1006,phase:1,block,\
				msg:'Too many WebSocket handshake attempts'"
		`
	}

	reverse_proxy {env.BACKEND} {
		header_up X-Forwarded-Proto  https
		header_up X-Forwarded-Scheme https
	}
}
